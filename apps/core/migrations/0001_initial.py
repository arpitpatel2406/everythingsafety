# Generated by Django 5.2.5 on 2025-08-14 13:49

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Consignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('SUPPLIER', 'Supplier'), ('OUTLET', 'Outlet'), ('STOCKTAKE', 'Stocktake'), ('RETURN', 'Return')], max_length=20)),
                ('reference', models.CharField(blank=True, max_length=120, null=True)),
                ('status', models.CharField(default='OPEN', max_length=32)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('symbol', models.CharField(blank=True, max_length=8, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('customer_code', models.CharField(blank=True, max_length=120, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=120, null=True)),
                ('last_name', models.CharField(blank=True, max_length=120, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('mobile', models.CharField(blank=True, max_length=50, null=True)),
                ('password_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('account_balance', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GiftCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=64, unique=True)),
                ('initial_balance', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryCount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='IN_PROGRESS', max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('ledger_code', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=50, null=True)),
                ('receipt_prefix', models.CharField(blank=True, max_length=20, null=True)),
                ('receipt_sequence', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=120, null=True)),
                ('state', models.CharField(blank=True, max_length=120, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=32, null=True)),
                ('country', models.CharField(blank=True, max_length=120, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=120, null=True)),
                ('rate', models.FloatField()),
                ('is_default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VariantAttribute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(blank=True, max_length=1024, null=True)),
                ('level', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.category')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, choices=[('billing', 'Billing'), ('shipping', 'Shipping'), ('other', 'Other')], max_length=20, null=True)),
                ('line1', models.CharField(max_length=255)),
                ('line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=120)),
                ('state', models.CharField(blank=True, max_length=120, null=True)),
                ('postal_code', models.CharField(max_length=32)),
                ('country', models.CharField(max_length=120)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.customer')),
            ],
        ),
        migrations.AddField(
            model_name='customer',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.customergroup'),
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rate', models.FloatField()),
                ('as_of', models.DateTimeField(default=django.utils.timezone.now)),
                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_rates', to='core.currency')),
                ('quote_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quote_rates', to='core.currency')),
            ],
        ),
        migrations.CreateModel(
            name='LoyaltyAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('balance', models.FloatField(default=0.0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=16)),
                ('shipping_method', models.CharField(blank=True, max_length=120, null=True)),
                ('shipping_fee', models.FloatField(default=0.0)),
                ('shipping_tax', models.FloatField(default=0.0)),
                ('subtotal', models.FloatField(default=0.0)),
                ('total_discount', models.FloatField(default=0.0)),
                ('total_tax', models.FloatField(default=0.0)),
                ('total', models.FloatField(default=0.0)),
                ('order_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('tracking_number', models.CharField(blank=True, max_length=255, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.address')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.customer')),
                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.address')),
            ],
        ),
        migrations.CreateModel(
            name='PriceBook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('customer_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.customergroup')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('sku', models.CharField(max_length=120, unique=True)),
                ('barcode', models.CharField(blank=True, max_length=120, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.FloatField()),
                ('cost', models.FloatField(blank=True, null=True)),
                ('price_includes_tax', models.BooleanField(default=False)),
                ('item_type', models.CharField(choices=[('simple', 'Simple'), ('variant', 'Variant'), ('matrix', 'Matrix'), ('non_inventory', 'Non Inventory')], default='simple', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_published_online', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.brand')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.category')),
                ('parent_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.supplier')),
                ('tax', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.tax')),
            ],
        ),
        migrations.CreateModel(
            name='PriceBookProduct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('retail_price', models.FloatField(blank=True, null=True)),
                ('loyalty_amount', models.FloatField(blank=True, null=True)),
                ('price_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.pricebook')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.FloatField()),
                ('discount_amount', models.FloatField(default=0.0)),
                ('tax_amount', models.FloatField(default=0.0)),
                ('cost', models.FloatField(blank=True, null=True)),
                ('total_price', models.FloatField()),
                ('total_tax', models.FloatField(default=0.0)),
                ('status', models.CharField(choices=[('normal', 'Normal'), ('returned', 'Returned'), ('cancelled', 'Cancelled'), ('fulfilled', 'Fulfilled'), ('backordered', 'Backordered')], default='normal', max_length=16)),
                ('note', models.TextField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryCountItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expected_qty', models.IntegerField(default=0)),
                ('counted_qty', models.IntegerField(default=0)),
                ('count', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inventorycount')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='ConsignmentItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('cost', models.FloatField(blank=True, null=True)),
                ('consignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.consignment')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_url', models.TextField()),
                ('sort_order', models.IntegerField(default=0)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.product')),
            ],
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('discount_percent', models.FloatField(blank=True, null=True)),
                ('discount_amount', models.FloatField(blank=True, null=True)),
                ('customer_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.customergroup')),
            ],
        ),
        migrations.CreateModel(
            name='PromotionProduct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('promotion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.promotion')),
            ],
        ),
        migrations.CreateModel(
            name='RegisterShift',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed')], default='open', max_length=16)),
                ('opening_float', models.FloatField(default=0.0)),
                ('closing_amount', models.FloatField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.register')),
            ],
        ),
        migrations.CreateModel(
            name='CashMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.registershift')),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('open', 'Open'), ('completed', 'Completed'), ('refunded', 'Refunded'), ('voided', 'Voided'), ('on_account', 'On Account'), ('layaway', 'Layaway')], default='completed', max_length=16)),
                ('invoice_number', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('subtotal', models.FloatField(default=0.0)),
                ('total_discount', models.FloatField(default=0.0)),
                ('total_tax', models.FloatField(default=0.0)),
                ('total', models.FloatField(default=0.0)),
                ('exchange_rate_used', models.FloatField(blank=True, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField(blank=True, null=True)),
                ('is_refund', models.BooleanField(default=False)),
                ('currency_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.currency')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.customer')),
                ('register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.register')),
                ('return_for', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.sale')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('external_ref', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.order')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.paymentmethod')),
                ('sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.sale')),
            ],
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.loyaltyaccount')),
                ('sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.sale')),
            ],
        ),
        migrations.CreateModel(
            name='GiftCardTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('amount', models.FloatField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('gift_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.giftcard')),
                ('sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.sale')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerAccountTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.customer')),
                ('sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.sale')),
            ],
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.FloatField()),
                ('discount_amount', models.FloatField(default=0.0)),
                ('tax_amount', models.FloatField(default=0.0)),
                ('cost', models.FloatField(blank=True, null=True)),
                ('total_price', models.FloatField()),
                ('total_tax', models.FloatField(default=0.0)),
                ('status', models.CharField(choices=[('normal', 'Normal'), ('returned', 'Returned'), ('cancelled', 'Cancelled'), ('fulfilled', 'Fulfilled'), ('backordered', 'Backordered')], default='normal', max_length=16)),
                ('note', models.TextField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sale')),
            ],
        ),
        migrations.CreateModel(
            name='SerialNumber',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('is_sold', models.BooleanField(default=False)),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('sale_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.saleitem')),
            ],
        ),
        migrations.AddField(
            model_name='saleitem',
            name='serial_number',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.serialnumber'),
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('timezone', models.CharField(blank=True, max_length=64, null=True)),
                ('currency_symbol', models.CharField(blank=True, max_length=8, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=120, null=True)),
                ('state', models.CharField(blank=True, max_length=120, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=32, null=True)),
                ('country', models.CharField(blank=True, max_length=120, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('currency_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.currency')),
                ('default_tax', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.tax')),
            ],
        ),
        migrations.AddField(
            model_name='sale',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store'),
        ),
        migrations.AddField(
            model_name='register',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store'),
        ),
        migrations.AddField(
            model_name='promotion',
            name='outlet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.store'),
        ),
        migrations.AddField(
            model_name='pricebook',
            name='outlet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.store'),
        ),
        migrations.AddField(
            model_name='order',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store'),
        ),
        migrations.AddField(
            model_name='inventorycount',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store'),
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_quantity', models.IntegerField(default=0)),
                ('reorder_point', models.IntegerField(blank=True, null=True)),
                ('reorder_amount', models.IntegerField(blank=True, null=True)),
                ('average_cost', models.FloatField(blank=True, null=True)),
                ('last_counted_at', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store')),
            ],
        ),
        migrations.AddField(
            model_name='consignment',
            name='from_store',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consignments_from', to='core.store'),
        ),
        migrations.AddField(
            model_name='consignment',
            name='to_store',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consignments_to', to='core.store'),
        ),
        migrations.CreateModel(
            name='StoreCreditAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('balance', models.FloatField(default=0.0)),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.customer')),
            ],
        ),
        migrations.CreateModel(
            name='StoreCreditTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('reason', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.storecreditaccount')),
                ('sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.sale')),
            ],
        ),
        migrations.AddField(
            model_name='consignment',
            name='supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.supplier'),
        ),
        migrations.CreateModel(
            name='OutletProductTax',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store')),
                ('tax', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tax')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=120, null=True)),
                ('last_name', models.CharField(blank=True, max_length=120, null=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('username', models.CharField(blank=True, max_length=120, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('password_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.role')),
            ],
        ),
        migrations.AddField(
            model_name='sale',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.user'),
        ),
        migrations.AddField(
            model_name='registershift',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.user'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=120)),
                ('entity_type', models.CharField(max_length=120)),
                ('entity_id', models.CharField(max_length=64)),
                ('before', models.TextField(blank=True, null=True)),
                ('after', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.user')),
            ],
        ),
        migrations.CreateModel(
            name='VariantValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=120)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.variantattribute')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
            ],
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='core_catego_name_6ef604_idx'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(fields=('parent', 'name'), name='uq_categories_parent_name'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['first_name', 'last_name'], name='core_custom_first_n_210f8a_idx'),
        ),
        migrations.AddConstraint(
            model_name='exchangerate',
            constraint=models.UniqueConstraint(fields=('base_currency', 'quote_currency'), name='uq_exchange_pair'),
        ),
        migrations.AddConstraint(
            model_name='pricebookproduct',
            constraint=models.UniqueConstraint(fields=('price_book', 'product'), name='uq_pricebook_product'),
        ),
        migrations.AddConstraint(
            model_name='inventorycountitem',
            constraint=models.UniqueConstraint(fields=('count', 'product'), name='uq_inventory_count_item'),
        ),
        migrations.AddConstraint(
            model_name='cartitem',
            constraint=models.UniqueConstraint(fields=('cart', 'product'), name='uq_cart_items_cart_product'),
        ),
        migrations.AddConstraint(
            model_name='promotionproduct',
            constraint=models.UniqueConstraint(fields=('promotion', 'product'), name='uq_promotion_product'),
        ),
        migrations.AddIndex(
            model_name='cashmovement',
            index=models.Index(fields=['shift'], name='core_cashmo_shift_i_d8099c_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['datetime'], name='core_paymen_datetim_f5af9b_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['account'], name='core_loyalt_account_576ac7_idx'),
        ),
        migrations.AddIndex(
            model_name='giftcardtransaction',
            index=models.Index(fields=['gift_card'], name='core_giftca_gift_ca_69dd3f_idx'),
        ),
        migrations.AddIndex(
            model_name='customeraccounttransaction',
            index=models.Index(fields=['customer'], name='core_custom_custome_06aab3_idx'),
        ),
        migrations.AddIndex(
            model_name='serialnumber',
            index=models.Index(fields=['product'], name='core_serial_product_9318a0_idx'),
        ),
        migrations.AddConstraint(
            model_name='register',
            constraint=models.UniqueConstraint(fields=('store', 'code'), name='uq_registers_store_code'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['is_active', 'starts_at', 'ends_at'], name='core_promot_is_acti_7daf6b_idx'),
        ),
        migrations.AddIndex(
            model_name='pricebook',
            index=models.Index(fields=['is_active', 'starts_at', 'ends_at'], name='core_priceb_is_acti_caa3f1_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['location', 'order_date'], name='core_order_locatio_ee3b95_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorycount',
            index=models.Index(fields=['store'], name='core_invent_store_i_b70651_idx'),
        ),
        migrations.AddIndex(
            model_name='inventory',
            index=models.Index(fields=['store'], name='core_invent_store_i_1a1eef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('product', 'store')},
        ),
        migrations.AddIndex(
            model_name='consignment',
            index=models.Index(fields=['type', 'status'], name='core_consig_type_70c896_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['name'], name='core_store_name_854522_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='core_produc_name_be3252_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='core_produc_barcode_5cc7aa_idx'),
        ),
        migrations.AddConstraint(
            model_name='outletproducttax',
            constraint=models.UniqueConstraint(fields=('store', 'product'), name='uq_outlet_product_tax'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name', 'last_name'], name='core_user_first_n_7ed624_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['store', 'datetime'], name='core_sale_store_i_637580_idx'),
        ),
        migrations.AddIndex(
            model_name='registershift',
            index=models.Index(fields=['register', 'opened_at'], name='core_regist_registe_52d9e3_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['entity_type', 'entity_id'], name='core_auditl_entity__244637_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='core_auditl_created_dc23ea_idx'),
        ),
        migrations.AddConstraint(
            model_name='variantvalue',
            constraint=models.UniqueConstraint(fields=('product', 'attribute'), name='uq_variant_values_product_attribute'),
        ),
    ]
